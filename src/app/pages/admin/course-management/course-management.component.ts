import { Component, OnInit, Inject, PLATFORM_ID, AfterViewInit, HostListener } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { Router } from '@angular/router';
import { CourseService, Course } from '../../../services/course.service';
import { SessionService } from '../../../services/session.service';
import { UserService } from '../../../services/user.service';
import { NotificationService } from '../../../services/notification.service';
import { NotificationComponent } from '../../../components/notification/notification.component';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { SidebarWrapperComponent } from '../../../components/sidebar-wrapper/sidebar-wrapper.component';
import { ProfileComponent } from '../../../components/profile/profile.component';
@Component({
  selector: 'app-course-management',
  standalone: true,
  imports: [CommonModule, FormsModule, SidebarWrapperComponent, ProfileComponent, NotificationComponent],
  templateUrl: './course-management.component.html',
  styleUrls: ['./course-management.component.scss']
})
export class CourseManagementComponent implements OnInit, AfterViewInit {
  courses: Course[] = [];
  isCreating = false;
  isViewing = false;
  isDropdownOpen = false; // Th√™m property ƒë·ªÉ track dropdown state
  isCategoryDropdownOpen = false; // Th√™m property cho form category dropdown
  isEditCategoryDropdownOpen = false; // Th√™m property cho edit form category dropdown
  Math = Math; // Expose Math object to template
  
  // Filter properties
  selectedCategoryFilter: string = '0'; // Change to string to match select value
  searchTerm: string = '';
  currentPage: number = 1;
  pageSize: number = 6;

  // Reset to first page when filters change
  onFilterChange(): void {
    this.currentPage = 1;
  }

  // Custom dropdown methods
  toggleDropdown(): void {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  selectCategory(categoryId: string): void {
    this.selectedCategoryFilter = categoryId;
    this.isDropdownOpen = false;
    this.onFilterChange();
  }

  getSelectedCategoryName(): string {
    if (this.selectedCategoryFilter === '0') {
      return 'T·∫•t c·∫£';
    }
    const category = this.categories.find(cat => cat.categoryId.toString() === this.selectedCategoryFilter);
    return category ? category.name : 'T·∫•t c·∫£';
  }

  // Form category dropdown methods
  toggleCategoryDropdown(): void {
    this.isCategoryDropdownOpen = !this.isCategoryDropdownOpen;
  }

  selectFormCategory(categoryId: number | null): void {
    this.courseForm.categoryId = categoryId || 0;
    this.isCategoryDropdownOpen = false;
  }

  getSelectedCategoryFormName(): string {
    if (!this.courseForm.categoryId) {
      return 'Ch·ªçn danh m·ª•c';
    }
    const category = this.categories.find(cat => cat.categoryId === this.courseForm.categoryId);
    return category ? category.name : 'Ch·ªçn danh m·ª•c';
  }

  // Edit form category dropdown methods
  toggleEditCategoryDropdown(): void {
    this.isEditCategoryDropdownOpen = !this.isEditCategoryDropdownOpen;
  }

  selectEditCategory(categoryId: number): void {
    if (this.selectedCourse) {
      this.selectedCourse.categoryId = categoryId;
    }
    this.isEditCategoryDropdownOpen = false;
  }

  getSelectedEditCategoryName(): string {
    if (!this.selectedCourse?.categoryId) {
      return 'Ch·ªçn danh m·ª•c';
    }
    const category = this.categories.find(cat => cat.categoryId === this.selectedCourse!.categoryId);
    return category ? category.name : 'Ch·ªçn danh m·ª•c';
  }

  // Close dropdown when clicking outside
  @HostListener('document:click', ['$event'])
  onDocumentClick(event: MouseEvent): void {
    const target = event.target as HTMLElement;
    const dropdown = target.closest('.category-filter-wrapper');
    const formDropdown = target.closest('.form-dropdown-wrapper');
    
    if (!dropdown) {
      this.isDropdownOpen = false;
    }
    if (!formDropdown) {
      this.isCategoryDropdownOpen = false;
      this.isEditCategoryDropdownOpen = false;
    }
  }

  courseForm = {
    title: '',
    description: '',
    categoryId: 0,
    instructorId: 0,
    status: '',
    price: 0
  };
  selectedCourse: Course | null = null;
  selectedCourseId: number | null = null;
  selectedImageFile: File | null = null;
  imagePreviewUrl: string | null = null;

  // Profile component properties
  username: string = '';
  userRole: string = '';
  avatarUrl: string = '';

  instructors: any[] = [];
  categories: any[] = [];

  constructor(
    private courseService: CourseService,
    private sessionService: SessionService,
    private userService: UserService,
    private notificationService: NotificationService,
    private http: HttpClient,
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {}

  ngAfterViewInit(): void {
    // Load data only after view is initialized and only in browser
    if (isPlatformBrowser(this.platformId)) {
      this.loadCourses();
      this.loadInstructors();
      this.loadCategories();
    }
  }

  ngOnInit(): void {
    // Initialize user profile
    this.initializeUserProfile();
  }

  loadCourses(): void {
    this.courseService.getCourses().subscribe({
      next: (data) => {
        this.courses = data;
      },
      error: (err) => {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc:', err);
      }
    });
  }

  loadInstructors(): void {
    // SSR-safe token injection
    let headers: any = {};
    if (isPlatformBrowser(this.platformId)) {
      const token = localStorage.getItem('token');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
    }
    
    this.http.get<any[]>('http://localhost:8080/api/users/list?role=instructor', { headers })
      .subscribe({
        next: (data) => {
          this.instructors = data;
        },
        error: (err) => {
          console.error('‚ùå L·ªói khi l·∫•y instructor:', err);
        }
      });
  }

  loadCategories(): void {
    // SSR-safe token injection
    let headers: any = {};
    if (isPlatformBrowser(this.platformId)) {
      const token = localStorage.getItem('token');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
    }
    
    this.http.get<any[]>('http://localhost:8080/api/categories/list', { headers })
      .subscribe({
        next: (data) => {
          this.categories = data;
        },
        error: (err) => {
          console.error('‚ùå L·ªói khi l·∫•y categories:', err);
        }
      });
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.selectedImageFile = input.files[0];
      this.imagePreviewUrl = URL.createObjectURL(this.selectedImageFile);
    }
  }

  startCreating(): void {
    this.resetForm();
    this.isCreating = true;
    this.isViewing = false;
  }

  cancelCreating(): void {
    this.resetForm();
    this.isCreating = false;
  }

  cancelEditing(): void {
    this.resetForm();
    this.isViewing = false;
    this.selectedCourseId = null;
  }

  submitCourse(): void {
    const { title, description, categoryId, instructorId, status, price } = this.courseForm;

    if (!title || !description || !categoryId || !instructorId || !status || !price) {
      this.notificationService.warning('Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.');
      return;
    }

    if (!this.selectedImageFile) {
      this.notificationService.warning('Thi·∫øu ·∫£nh kh√≥a h·ªçc', 'Vui l√≤ng ch·ªçn ·∫£nh kh√≥a h·ªçc.');
      return;
    }

    this.courseService.createCourse(this.courseForm, this.selectedImageFile).subscribe({
      next: (res) => {
        const message = typeof res === 'string' ? res : res?.message || 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!';
        this.notificationService.success('T·∫°o kh√≥a h·ªçc th√†nh c√¥ng', message);
        this.resetForm();
        this.isCreating = false;
        this.loadCourses();
      },
      error: (err) => {
        const msg = typeof err.error === 'string' ? err.error : err.error?.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o kh√≥a h·ªçc!';
        this.notificationService.error('T·∫°o kh√≥a h·ªçc th·∫•t b·∫°i', msg);
      }
    });
  }
viewCourse(course: Course): void {
  this.selectedCourse = { ...course };
  this.selectedCourseId = (course as any).id ?? (course as any).courseId ?? null;
  
  console.log('üîç Debug viewCourse:', {
    course: course,
    selectedCourseId: this.selectedCourseId,
    courseId: (course as any).courseId,
    id: (course as any).id
  });
  
  if (!this.selectedCourseId) {
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng id ho·∫∑c courseId trong ƒë·ªëi t∆∞·ª£ng course:', course);
  }
  
  this.imagePreviewUrl = course.thumbnailUrl
    ? `http://localhost:8080/images/courses/${course.thumbnailUrl}`
    : null;

  // ƒê·ªìng b·ªô d·ªØ li·ªáu v√†o selectedCourse (ƒë·ªÉ binding tr·ª±c ti·∫øp trong popup)
  // Kh√¥ng c·∫ßn g√°n v√†o courseForm n·ªØa
  this.isViewing = true;
  this.isCreating = false;
}
updateCourse(): void {
  if (!this.selectedCourseId || !this.selectedCourse) {
    this.notificationService.error('L·ªói c·∫≠p nh·∫≠t', 'Kh√¥ng t√¨m th·∫•y ID kh√≥a h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t!');
    return;
  }

  const { title, description, categoryId, instructorId, status, price } = this.selectedCourse;

  if (!title || !description || !categoryId || !instructorId || !status || !price) {
    this.notificationService.warning('Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng.');
    return;
  }

  const coursePayload = {
    courseId: this.selectedCourseId,
    title,
    description,
    categoryId,
    instructorId,
    status,
    price,
    thumbnailUrl: this.selectedCourse?.thumbnailUrl || '',
    instructorImage: this.selectedCourse?.instructorImage || ''
  };

  const formData = new FormData();
  formData.append(
    'course',
    new Blob([JSON.stringify(coursePayload)], { type: 'application/json' })
  );
  if (this.selectedImageFile) {
    formData.append('image', this.selectedImageFile);
  }

  this.http.put(`http://localhost:8080/api/courses/${this.selectedCourseId}`, formData, {
    responseType: 'text'
  }).subscribe({
    next: (res) => {
      this.notificationService.success('C·∫≠p nh·∫≠t th√†nh c√¥ng', res || 'Kh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
      this.resetForm();
      this.isViewing = false;
      this.loadCourses();
    },
    error: (err) => {
      if (err.status === 403) {
        this.notificationService.error('L·ªói ph√¢n quy·ªÅn', 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t kh√≥a h·ªçc n√†y. Vui l√≤ng ki·ªÉm tra token ho·∫∑c quy·ªÅn admin.');
      } else {
        const msg = typeof err.error === 'string'
          ? err.error
          : (err.error as any)?.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t!';
        this.notificationService.error('C·∫≠p nh·∫≠t th·∫•t b·∫°i', msg);
      }
    }
  });
}



  resetForm(): void {
    this.courseForm = {
      title: '',
      description: '',
      categoryId: 0,
      instructorId: 0,
      status: '',
      price: 0
    };
    this.selectedCourse = null;
    this.selectedCourseId = null;
    this.selectedImageFile = null;
    this.imagePreviewUrl = null;
  }
  deleteSelectedCourse(): void {
  console.log('üîç Debug deleteSelectedCourse:', {
    selectedCourseId: this.selectedCourseId,
    selectedCourse: this.selectedCourse
  });
  
  if (!this.selectedCourseId) {
    alert('‚ùå Kh√¥ng t√¨m th·∫•y ID kh√≥a h·ªçc ƒë·ªÉ x√≥a!');
    return;
  }

  // Ki·ªÉm tra token tr∆∞·ªõc khi th·ª±c hi·ªán API call
  const token = localStorage.getItem('token');
  if (!token) {
    this.notificationService.error('Ch∆∞a ƒëƒÉng nh·∫≠p', 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.');
    return;
  }

  // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n kh√¥ng
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const currentTime = Math.floor(Date.now() / 1000);
    
    console.log('üîç Token check:', {
      tokenExp: payload.exp,
      currentTime: currentTime,
      expired: payload.exp <= currentTime,
      role: payload.role,
      userId: payload.userId
    });
    
    if (payload.exp <= currentTime) {
      this.notificationService.error('Phi√™n h·∫øt h·∫°n', 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      localStorage.removeItem('token');
      return;
    }

    // Ki·ªÉm tra quy·ªÅn admin
    if (!payload.role || !payload.role.includes('admin')) {
      this.notificationService.error('Kh√¥ng c√≥ quy·ªÅn', 'B·∫°n kh√¥ng c√≥ quy·ªÅn ADMIN ƒë·ªÉ x√≥a kh√≥a h·ªçc!');
      return;
    }
  } catch (error) {
    console.error('‚ùå Token kh√¥ng h·ª£p l·ªá:', error);
    alert('‚ùå Token kh√¥ng h·ª£p l·ªá! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    localStorage.removeItem('token');
    return;
  }

  // Hi·ªÉn th·ªã warning message chi ti·∫øt tr∆∞·ªõc khi confirm
  const courseName = this.selectedCourse?.title || 'kh√≥a h·ªçc n√†y';
  const warningMessage = `‚ö†Ô∏è C·∫¢NH B√ÅO X√ìA KH√ìA H·ªåC

üìö Kh√≥a h·ªçc: "${courseName}"

üî∏ N·∫øu kh√≥a h·ªçc c√≥ videos ‚Üí X√ìA S·∫º TH·∫§T B·∫†I
üî∏ N·∫øu kh√≥a h·ªçc c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω ‚Üí X√ìA S·∫º TH·∫§T B·∫†I  
üî∏ C·∫ßn x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu li√™n quan tr∆∞·ªõc

üí° H∆Ø·ªöNG D·∫™N:
1. X√≥a t·∫•t c·∫£ videos thu·ªôc kh√≥a h·ªçc
2. X√≥a ƒëƒÉng k√Ω h·ªçc vi√™n (n·∫øu c√≥)
3. Quay l·∫°i x√≥a kh√≥a h·ªçc

‚ö†Ô∏è H√ÄNH ƒê·ªòNG KH√îNG TH·ªÇ HO√ÄN T√ÅC!

B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?`;

  if (!confirm(warningMessage)) return;

  console.log('üöÄ ƒêang g·ªçi API x√≥a kh√≥a h·ªçc v·ªõi ID:', this.selectedCourseId);

  this.courseService.deleteCourse(this.selectedCourseId).subscribe({
    next: (res) => {
      console.log('‚úÖ Delete success:', res);
      alert('‚úÖ X√ìA KH√ìA H·ªåC TH√ÄNH C√îNG!\n\nKh√≥a h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng.');
      this.loadCourses();
      this.resetForm();
    },
    error: (err) => {
      console.log('‚ÑπÔ∏è API Error Response:', err);
      
      // Enhanced logging cho debug
      console.log('üîç Error details:', {
        status: err.status,
        statusText: err.statusText,
        errorMessage: err.error,
        message: err.message
      });
      
      if (err.status === 409) {
        // ‚úÖ CONFLICT - Course c√≥ d·ªØ li·ªáu li√™n quan (constraint)
        console.log('‚úÖ 409 Conflict - Course has related data');
        alert(`üö´ KH√îNG TH·ªÇ X√ìA KH√ìA H·ªåC!

üìö Kh√≥a h·ªçc "${courseName}" ƒëang c√≥ d·ªØ li·ªáu li√™n quan:
üî∏ Videos thu·ªôc kh√≥a h·ªçc n√†y
üî∏ H·ªçc vi√™n ƒë√£ ƒëƒÉng k√Ω 
üî∏ D·ªØ li·ªáu kh√°c trong h·ªá th·ªëng

üí° C√ÅC B∆Ø·ªöC C·∫¶N L√ÄM:
1Ô∏è‚É£ V√†o "Qu·∫£n l√Ω Videos" ‚Üí X√≥a videos thu·ªôc kh√≥a h·ªçc
2Ô∏è‚É£ Ki·ªÉm tra v√† x√≥a ƒëƒÉng k√Ω h·ªçc vi√™n (n·∫øu c√≥)
3Ô∏è‚É£ Quay l·∫°i ƒë√¢y ƒë·ªÉ x√≥a kh√≥a h·ªçc

‚úÖ ƒê√¢y l√† c∆° ch·∫ø b·∫£o v·ªá d·ªØ li·ªáu, kh√¥ng ph·∫£i l·ªói h·ªá th·ªëng.`);
        
      } else if (err.status === 403) {
        // ‚õî Authentication/Authorization issue
        console.log('‚ö†Ô∏è 403 Forbidden error detected');
        alert(`‚õî L·ªñI PH√ÇN QUY·ªÄN (403 Forbidden)

üîê C√≥ th·ªÉ do:
‚Ä¢ Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
‚Ä¢ T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn ADMIN
‚Ä¢ Session ƒë√£ h·∫øt h·∫°n

üí° GI·∫¢I PH√ÅP:
1Ô∏è‚É£ ƒêƒÉng xu·∫•t v√† ƒëƒÉng nh·∫≠p l·∫°i
2Ô∏è‚É£ Ki·ªÉm tra role ADMIN trong profile
3Ô∏è‚É£ Li√™n h·ªá admin ƒë·ªÉ c·∫•p quy·ªÅn`);
        
      } else if (err.status === 404) {
        // üì≠ Course not found
        alert(`ÔøΩ KH√îNG T√åM TH·∫§Y KH√ìA H·ªåC

Kh√≥a h·ªçc c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.`);
        this.loadCourses(); // Refresh list
        
      } else {
        // ‚ùå Other errors
        console.log('‚ùå Unhandled error type:', err.status);
        const msg = err.error || err.message || 'X√≥a th·∫•t b·∫°i!';
        alert(`‚ùå L·ªñI H·ªÜ TH·ªêNG!

Status: ${err.status}
Message: ${msg}`);
      }
    }
  });
}

getFilteredCourses(): Course[] {
  const term = this.searchTerm?.trim().toLowerCase() || '';
  
  return this.courses.filter(course => {
    // Search term filter: If no search term, or title contains search term
    const matchesSearchTerm = !term || course.title?.toLowerCase().includes(term);
    
    // Category filter: If "All categories" ('0') or matches selected category
    const matchesCategory = this.selectedCategoryFilter === '0' || course.categoryId === parseInt(this.selectedCategoryFilter);
    
    return matchesSearchTerm && matchesCategory;
  });
}

getPagedCourses(): Course[] {
  const filtered = this.getFilteredCourses();
  const start = (this.currentPage - 1) * this.pageSize;
  return filtered.slice(start, start + this.pageSize);
}

getTotalPages(): number {
  return Math.ceil(this.getFilteredCourses().length / this.pageSize);
}

goToPage(page: number): void {
  if (page < 1 || page > this.getTotalPages()) return;
  this.currentPage = page;
}

// Initialize user profile data from session
private initializeUserProfile() {
  const userInfo = this.userService.getCurrentUserInfo();
  this.username = userInfo.username;
  this.userRole = userInfo.role; // Gi·ªØ nguy√™n role g·ªëc
  this.avatarUrl = userInfo.avatarUrl; // ‚úÖ S·ª≠ d·ª•ng avatar m·∫∑c ƒë·ªãnh t·ª´ service
}

// Format role ƒë·ªÉ hi·ªÉn th·ªã (ch·ªØ c√°i ƒë·∫ßu vi·∫øt hoa)
getDisplayRole(role: string): string {
  const cleanRole = role.replace('ROLE_', '').toLowerCase();
  return cleanRole.charAt(0).toUpperCase() + cleanRole.slice(1);
}

// Profile component event handlers
onProfileUpdate() {
  console.log('Profile update requested');
}

  navigateToLessonManagement() {
    this.router.navigate(['/courses']);
  }

  onLogout() {
    this.sessionService.logout();
  }
}