import { inject, PLATFORM_ID } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';

export const loginRedirectGuard: CanActivateFn = (route, state) => {
  const platformId = inject(PLATFORM_ID);
  const router = inject(Router);

  if (isPlatformBrowser(platformId)) {
    const token = localStorage.getItem('token');
    if (token) {
      // ƒê√£ c√≥ token, ki·ªÉm tra xem token c√≥ h·ª£p l·ªá kh√¥ng
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const currentTime = Math.floor(Date.now() / 1000);
        
        if (payload.exp > currentTime) {
          // Token c√≤n h·ª£p l·ªá, redirect t·ªõi dashboard
          console.log('üîÑ User already logged in, redirecting to dashboard');
          router.navigate(['/dashboard']);
          return false;
        } else {
          // Token h·∫øt h·∫°n, x√≥a v√† cho ph√©p v√†o login
          console.log('‚è∞ Token expired, clearing localStorage');
          localStorage.removeItem('token');
          return true;
        }
      } catch (error) {
        // Token kh√¥ng h·ª£p l·ªá, x√≥a v√† cho ph√©p v√†o login
        console.error('‚ùå Invalid token, clearing localStorage');
        localStorage.removeItem('token');
        return true;
      }
    }
    
    // Kh√¥ng c√≥ token, cho ph√©p v√†o login
    return true;
  }
  
  // SSR - lu√¥n cho ph√©p
  return true;
};
